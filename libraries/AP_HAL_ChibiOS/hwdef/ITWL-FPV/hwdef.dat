# hw definition file for processing by chibios_hwdef.py
# for the ITWL-FPV hardware

# MCU class and specific type
MCU STM32H7xx STM32H743xx

# crystal frequency
OSCILLATOR_HZ 12000000

# board ID for firmware load
APJ_BOARD_ID AP_HW_ITWL-FPV

# flash size
FLASH_SIZE_KB 2048

# bootloader takes first sector
FLASH_RESERVE_START_KB 128

# ChibiOS system timer
STM32_ST_USE_TIMER 12
define CH_CFG_ST_RESOLUTION 16

define HAL_STORAGE_SIZE 32768
STORAGE_FLASH_PAGE 14

# To be compatible with the px4 bootloader we use a different RAM_MAP
env USE_ALT_RAM_MAP 1

# order of UARTs (and USB)
SERIAL_ORDER OTG1 UART8 USART1 USART2 USART3 UART4 EMPTY EMPTY UART7

# USB
PB14 OTG_HS_DM OTG1
PB15 OTG_HS_DP OTG1
PB13 VBUS INPUT OPENDRAIN

# TELEM1
PE1 UART8_TX UART8
PE0 UART8_RX UART8

# GPS1
PD8 USART3_TX USART3
PD9 USART3_RX USART3
define DEFAULT_SERIAL2_PROTOCOL SerialProtocol_GPS

# GPS2
PD1 UART4_TX UART4
PD0 UART4_RX UART4
define DEFAULT_SERIAL2_PROTOCOL SerialProtocol_GPS

# TELEM2
PA9  USART1_TX USART1
PA10 USART1_RX USART1
define DEFAULT_SERIAL4_PROTOCOL SerialProtocol_None

# TELEM3
PD6 USART2_RX USART2
PD5 USART2_TX USART2
define DEFAULT_SERIAL4_PROTOCOL SerialProtocol_None

# ESC Telemetry (RX only)
PE8 UART7_TX UART7 NODMA
PE7 UART7_RX UART7 NODMA
define DEFAULT_SERIAL5_PROTOCOL SerialProtocol_ESCTelemetry
define DEFAULT_SERIAL5_BAUD 115

# CAN bus
PA11 CAN1_RX CAN1
PA12 CAN1_TX CAN1

# CAN bus
PB5 CAN2_RX CAN2
PB6 CAN2_TX CAN2

# SWD (Serial Wire Debug)
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# two I2C bus
I2C_ORDER I2C1 I2C2 I2C4

# I2C1 - Connector 1
PB8 I2C1_SCL I2C1   
PB9 I2C1_SDA I2C1   

# I2C2 - Connector 2
PB10 I2C2_SCL I2C2   
PB11 I2C2_SDA I2C2   

# I2C4 - Magnetometr
PD12 I2C4_SCL I2C4   
PD13 I2C4_SDA I2C4   

# PWM output pins
PE14 TIM1_CH4 TIM1  PWM(1) GPIO(44) BIDIR
PE13 TIM1_CH3 TIM1  PWM(2) GPIO(43)	
PE11 TIM1_CH2 TIM1  PWM(3) GPIO(41) BIDIR
PE9  TIM1_CH1 TIM1  PWM(4) GPIO(39)	
PA3  TIM2_CH4 TIM2  PWM(5) GPIO(25) 
PA2  TIM2_CH3 TIM2  PWM(6) GPIO(24)
PA1  TIM2_CH2 TIM2  PWM(7) GPIO(23) 
PA0  TIM2_CH1 TIM2  PWM(8) GPIO(22)
PB0  TIM3_CH3 TIM3  PWM(9) GPIO(34) 
# PB1  TIM3_CH4 TIM3  PWM(10) GPIO(35)   #buzzer
PC6  TIM3_CH1 TIM3  PWM(11) GPIO(63)   #S-Bus out
PC7  TIM3_CH2 TIM3  PWM(12) GPIO(64)   #S-Bus In

define HAL_FRAME_TYPE_DEFAULT 12

# RGB LED
#PA5 TIM2_CH1 TIM2 PWM(9) GPIO(58)

# PWM output for buzzer
PB1 TIM3_CH4 TIM3 GPIO(35) ALARM

# GPIOs
PD10 PINIO1 OUTPUT GPIO(57) LOW
PD11 PINIO2 OUTPUT GPIO(58) LOW

# LEDs
PC5 LED_RED OUTPUT LOW GPIO(33)   
PC4 LED_GREEN OUTPUT LOW GPIO(32)   
PA4 LED_BLUE  OUTPUT LOW GPIO(28)   

define HAL_GPIO_A_LED_PIN 33   #
define HAL_GPIO_B_LED_PIN 32   #
define HAL_GPIO_C_LED_PIN 28 

define HAL_GPIO_LED_ON 1   #
define AP_NOTIFY_GPIO_LED_2_ENABLED 1   #

# ADC Probes
PC2 BATT_VOLTAGE_SENS ADC1 SCALE(1)
PC3 BATT_CURRENT_SENS ADC2 SCALE(1)
# Analog battery input scaling
# See folder hwdef>scripts>STM32H743xx.py
define HAL_BATT_VOLT_PIN 3
define HAL_BATT_CURR_PIN 2

define HAL_BATT_MONITOR_DEFAULT 4
define HAL_BATT_VOLT_SCALE 30.0
define HAL_BATT_CURR_SCALE 40.0

# no built-in compass, but probe the i2c bus for all possible
# external compass types
define ALLOW_ARM_NO_COMPASS
define HAL_PROBE_EXTERNAL_I2C_COMPASSES

# SPI4 - IMU0
PE2 SPI4_SCK SPI2
PE5 SPI4_MISO SPI2
PE6 SPI4_MOSI SPI2
PE3 CS_IMU1 CS

# SPI1 - EEPROM
PA5  SPI3_SCK  SPI1
PA6  SPI3_MISO SPI1
PA7  SPI3_MOSI SPI1
PC13 CS_EEPROM CS

# barometr
PE2 SPI4_SCK SPI2
PE5 SPI4_MISO SPI2
PE6 SPI4_MOSI SPI2
PE4 CS_BARO1 CS

# BARO DPS310 I2C:0:0x76
# COMPASS
COMPASS MC34160 I2C:0:0x60 false ROTATION_NONE

# microSD card
PC8 SDMMC1_D0 SDMMC1
PC9 SDMMC1_D1 SDMMC1
PC10 SDMMC1_D2 SDMMC1
PC11 SDMMC1_D3 SDMMC1
PC12 SDMMC1_CK SDMMC1
PD2 SDMMC1_CMD SDMMC1

# SPI devices
SPIDEV icm42653 SPI2 DEVID1 CS_IMU1 MODE3  2*MHZ  8*MHZ
SPIDEV bmp581   SPI2 DEVID1 CS_BARO1 MODE3  2*MHZ  8*MHZ
SPIDEV eeprom   SPI4 DEVID1 CS_EEPROM MODE3 2*MHZ  10*MHZ

# IMUs
IMU Invensensev3 SPI:icm42653 ROTATION_ROLL_180_YAW_90      #obr√≥t do ustalenia

